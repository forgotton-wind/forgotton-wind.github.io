[{"content":"错误信息 在做 pacman -Syu 更新的时候，遇到这样的报错信息：\nerror: GPGME error: No data error: GPGME error: No data error: GPGME error: No data error: GPGME error: No data error: failed to synchronize all databases (unexpected error) 原因 校园网未登录 pacman在更新数据库文件时也会尝试下载$repo.db.sig，这里的$repo可以是 core、extra、community、archlinuxcn 等仓库名。\n但是无论是官方源还是 archlinuxcn 源，大多数源的数据库文件都不会被签名，也就不会存在 .db.sig 文件。pacman 尝试下载时这些数据库文件的签名文件时，镜像站就会返回 404 的 http 状态码告诉pacman没有这个文件。\n而出现这种错误的情况大多是发生在 校园网、酒店免费 WIFI 这种需要登陆以后才能上网的网络环境。\n因为 pacman 尝试下载 .db.sig 文件时被登陆网页劫持了（如果在这种网络环境下没有登陆，你无论访问什么网页都会被重定向到登录界面，http 的状态码此时是200，不是404）。pacman就把登录界面当成是.db.sig下载下来了。\n下载下来以后，pacman发现里面没有GPG签名数据并开始报错。此时无论再怎么同步源码、再怎么 Syyu 也不会有效果，必须人工干预。\n解决方案 第一种： sudo rm /var/lib/pacman/sync/*.sig 第二种： 删除旧的同步的db文件 sudo rm /var/lib/pacman/sync/* 重新生成pacman-key sudo pacman-key --init 重新Populate pacman-key sudo pacman-key --populate 重新同步 sudo pacman -Syyy ","permalink":"https://forgotton-wind.github.io/posts/gpgme_error/","summary":"错误信息 在做 pacman -Syu 更新的时候，遇到这样的报错信息：\nerror: GPGME error: No data error: GPGME error: No data error: GPGME error: No data error: GPGME error: No data error: failed to synchronize all databases (unexpected error) 原因 校园网未登录 pacman在更新数据库文件时也会尝试下载$repo.db.sig，这里的$repo可以是 core、extra、community、archlinuxcn 等仓库名。\n但是无论是官方源还是 archlinuxcn 源，大多数源的数据库文件都不会被签名，也就不会存在 .db.sig 文件。pacman 尝试下载时这些数据库文件的签名文件时，镜像站就会返回 404 的 http 状态码告诉pacman没有这个文件。\n而出现这种错误的情况大多是发生在 校园网、酒店免费 WIFI 这种需要登陆以后才能上网的网络环境。\n因为 pacman 尝试下载 .db.sig 文件时被登陆网页劫持了（如果在这种网络环境下没有登陆，你无论访问什么网页都会被重定向到登录界面，http 的状态码此时是200，不是404）。pacman就把登录界面当成是.db.sig下载下来了。\n下载下来以后，pacman发现里面没有GPG签名数据并开始报错。此时无论再怎么同步源码、再怎么 Syyu 也不会有效果，必须人工干预。\n解决方案 第一种： sudo rm /var/lib/pacman/sync/*.sig 第二种： 删除旧的同步的db文件 sudo rm /var/lib/pacman/sync/* 重新生成pacman-key sudo pacman-key --init 重新Populate pacman-key sudo pacman-key --populate 重新同步 sudo pacman -Syyy ","title":"pacman更新的时候遇到GPGME error: no data"},{"content":"Github连接注意事项 在git push或者pull的时候，连接github总是遇到各种各样的网络问题，现在一次性总结一下，方便以后回顾。\n网络问题 很多时候直接连不上，会先简单挂个梯子。但是往往未必有用。可以尝试两个方法。\n开全局模式。有效的原因可能是github不一定走代理，毕竟有时候还是能直连的。\n单独配置git的代理端口。配置方法是\ngit config --global http.proxy \u0026#34;http://127.0.0.1:xxxx\u0026#34; git config --global https.proxy \u0026#34;https://127.0.0.1:xxxx\u0026#34; 其中xxxx是你的代理的端口号，windows可以通过网络-\u0026gt;代理那边去查看。\n配置完后可以检查下：\ngit config --global --edit 看看对不对，有时候字符会有些问题。\n密码问题 git push的时候，以前是可以输入github的账号密码的，但是现在都需要输入个人秘钥。这个需要再github的个人主页的settings里面去创建。\n但是这个方法很麻烦，每次git push都要输入一次秘钥。一劳永逸的方法是配置ssh连接。但是这个里面也有一些坑。\n首先配置ssh连接需要创建本机的ssh key：\nssh-keygen -t rsa -C \u0026#34;你的git绑定的邮箱名字\u0026#34; 默认是会在~/.ssh/目录下，生成id_rsa, id_rsa_pub等文件。其中前者是你的私钥，后者是你要放到github的公钥。也是在github的个人settings里面ssh那里，按要求填进去就行。\n这样做完后一般可以连通，可以验证如下：\nssh -T git@github.com 但有时候还是有问题，连接超时。调研了一下，发现最佳的解决方案是在~/.ssh/目录下创建一个config文件，其中的内容是:\nHost github.com HostName ssh.github.com User git Port 443 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa 其中关键点在于第二行，因为github.com并不会自动的转换为ssh.github.com，我们启动的是后者，而不是前者，这会导致time out的产生。\n配置完这个就一切顺利了。\n","permalink":"https://forgotton-wind.github.io/posts/github_connnet/","summary":"Github连接注意事项 在git push或者pull的时候，连接github总是遇到各种各样的网络问题，现在一次性总结一下，方便以后回顾。\n网络问题 很多时候直接连不上，会先简单挂个梯子。但是往往未必有用。可以尝试两个方法。\n开全局模式。有效的原因可能是github不一定走代理，毕竟有时候还是能直连的。\n单独配置git的代理端口。配置方法是\ngit config --global http.proxy \u0026#34;http://127.0.0.1:xxxx\u0026#34; git config --global https.proxy \u0026#34;https://127.0.0.1:xxxx\u0026#34; 其中xxxx是你的代理的端口号，windows可以通过网络-\u0026gt;代理那边去查看。\n配置完后可以检查下：\ngit config --global --edit 看看对不对，有时候字符会有些问题。\n密码问题 git push的时候，以前是可以输入github的账号密码的，但是现在都需要输入个人秘钥。这个需要再github的个人主页的settings里面去创建。\n但是这个方法很麻烦，每次git push都要输入一次秘钥。一劳永逸的方法是配置ssh连接。但是这个里面也有一些坑。\n首先配置ssh连接需要创建本机的ssh key：\nssh-keygen -t rsa -C \u0026#34;你的git绑定的邮箱名字\u0026#34; 默认是会在~/.ssh/目录下，生成id_rsa, id_rsa_pub等文件。其中前者是你的私钥，后者是你要放到github的公钥。也是在github的个人settings里面ssh那里，按要求填进去就行。\n这样做完后一般可以连通，可以验证如下：\nssh -T git@github.com 但有时候还是有问题，连接超时。调研了一下，发现最佳的解决方案是在~/.ssh/目录下创建一个config文件，其中的内容是:\nHost github.com HostName ssh.github.com User git Port 443 PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa 其中关键点在于第二行，因为github.com并不会自动的转换为ssh.github.com，我们启动的是后者，而不是前者，这会导致time out的产生。\n配置完这个就一切顺利了。","title":"Github连接问题"},{"content":"EcoTTA: Memory-Efficient Continual Test-time Adaptation via Self-distilled Regularization EcoTTA是一篇研究持续TTA过程中如何减少内存消耗，从而能在端侧设备上实现持续适应的文章。本文借鉴了TinyTL、EATA等一系列工作，通过将源模型的encoder分块，并在每一块之间插入专属的元网络(包括一层BN和一个Conv的残差连接)，实现模型激活值内存占用大幅缩减。设计的损失函数包括经典的熵最小化，以及一个子蒸馏的正则项用于防止模型遗忘。\n","permalink":"https://forgotton-wind.github.io/posts/ecotta/","summary":"EcoTTA: Memory-Efficient Continual Test-time Adaptation via Self-distilled Regularization EcoTTA是一篇研究持续TTA过程中如何减少内存消耗，从而能在端侧设备上实现持续适应的文章。本文借鉴了TinyTL、EATA等一系列工作，通过将源模型的encoder分块，并在每一块之间插入专属的元网络(包括一层BN和一个Conv的残差连接)，实现模型激活值内存占用大幅缩减。设计的损失函数包括经典的熵最小化，以及一个子蒸馏的正则项用于防止模型遗忘。","title":"论文阅读-EcoTTA"}]